
Problem Description

Give a N * N square matrix A, return an array of its anti-diagonals. Look at the example for more details.


Problem Constraints

1<= N <= 1000
1<= A[i][j] <= 1e9


Input Format

First argument is an integer N, denoting the size of square 2D matrix.
Second argument is a 2D array A of size N * N.


Output Format

Return a 2D integer array of size (2 * N-1) * N, representing the anti-diagonals of input array A.
The vacant spaces in the grid should be assigned to 0.


Example Input

Input 1:
3
1 2 3
4 5 6
7 8 9
Input 2:

1 2
3 4


Example Output

Output 1:
1 0 0
2 4 0
3 5 7
6 8 0
9 0 0
Output 2:

1 0
2 3
4 0


Example Explanation

For input 1:
The first anti diagonal of the matrix is [1 ], the rest spaces shoud be filled with 0 making the row as [1, 0, 0].
The second anti diagonal of the matrix is [2, 4 ], the rest spaces shoud be filled with 0 making the row as [2, 4, 0].
The third anti diagonal of the matrix is [3, 5, 7 ], the rest spaces shoud be filled with 0 making the row as [3, 5, 7].
The fourth anti diagonal of the matrix is [6, 8 ], the rest spaces shoud be filled with 0 making the row as [6, 8, 0].
The fifth anti diagonal of the matrix is [9 ], the rest spaces shoud be filled with 0 making the row as [9, 0, 0].
For input 2:

The first anti diagonal of the matrix is [1 ], the rest spaces shoud be filled with 0 making the row as [1, 0, 0].
The second anti diagonal of the matrix is [2, 4 ], the rest spaces shoud be filled with 0 making the row as [2, 4, 0].
The third anti diagonal of the matrix is [3, 0, 0 ], the rest spaces shoud be filled with 0 making the row as [3, 0, 0].





================
import java.util.*;
class Main {
	static int[][] antidiagonal(int[][] A){
		int l =A.length;
		int[][] ans = new int[2*l-1][l];
		ArrayList<ArrayList<Integer>> ans1=  new ArrayList<ArrayList<Integer>>();
		//for(int g=0;g<2*l-1;g++){
		ArrayList<Integer> ans2 = new ArrayList<Integer>();
			for(int i=0;i<l;i++){
				for(int j=0;j<l;j++){
				//	if(i+j==g){
					if(i+j>=ans1.size()){
						ans1.add(new ArrayList<Integer>());	
					}
						ans1.get(i+j).add(A[i][j]);
						//System.out.print(A[i][j]);
					//}
				}
			}
		//	ans1.add(ans2);
			//System.out.println();
		//}
			for(int i=0;i<ans1.size();i++){
				for(int j=0;j<ans1.get(i).size();j++){
					ans[i][j]=ans1.get(i).get(j);
				}
			}

		return ans;
	}
	public static void main(String args[]) {
		Scanner myScanner = new Scanner(System.in);
		int r= myScanner.nextInt();
		int c= myScanner.nextInt();
		int[][] a= new int[r][c];
		for(int i=0;i<r;i++){
			for(int j=0;j<c;j++){
				a[i][j]=myScanner.nextInt();
				//System.out.print(a[i][j]);
			}
		}
		int[][] s=  antidiagonal(a);
		for(int i=0;i<2*r-1;i++){
			for(int j=0;j<c;j++){
				System.out.print(s[i][j]);
			}
			System.out.println();
		}
	}
}
====
N3 solution

public class Solution {
    public int[][] diagonal(int[][] A) {
        		int l =A.length;
		int[][] ans = new int[2*l-1][l];
		ArrayList<ArrayList<Integer>> ans1=  new ArrayList<ArrayList<Integer>>();
		for(int g=0;g<2*l-1;g++){
		ArrayList<Integer> ans2 = new ArrayList<Integer>();
			for(int i=0;i<l;i++){
				for(int j=0;j<l;j++){
					if(i+j==g){
						ans2.add(A[i][j]);
						//System.out.print(A[i][j]);
					}
				}
			}
			ans1.add(ans2);
			//System.out.println();
		}
			for(int i=0;i<ans1.size();i++){
				for(int j=0;j<ans1.get(i).size();j++){
					ans[i][j]=ans1.get(i).get(j);
				}
			}

		return ans;
    }
}
