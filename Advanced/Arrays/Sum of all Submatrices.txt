


Q2. Sum of all Submatrices
Solved
character backgroundcharacter
Stuck somewhere?
Ask for help from a TA and get it resolved.
Get help from TA.
Problem Description
Given a 2D Matrix A of dimensions N*N, we need to return the sum of all possible submatrices.



Problem Constraints
1 <= N <=30

0 <= A[i][j] <= 10



Input Format
Single argument representing a 2-D array A of size N x N.



Output Format
Return an integer denoting the sum of all possible submatrices in the given matrix.



Example Input
A = [ [1, 1]
      [1, 1] ]


Example Output
16


Example Explanation
Number of submatrices with 1 elements = 4, so sum of all such submatrices = 4 * 1 = 4
Number of submatrices with 2 elements = 4, so sum of all such submatrices = 4 * 2 = 8
Number of submatrices with 3 elements = 0
Number of submatrices with 4 elements = 1, so sum of such submatrix = 4
Total Sum = 4+8+4 = 16











public class Solution {
    public int solve(int[][] A) {
        //TL = row(element's row till 0), column(elements column till 0) 
        //BR = row(element row till end) , column(element's column till end)
        //total sub matrix for element say A[i][j] = no. of TL* no. of BR
        //contribution of element A[i][j] int total sum= A[i][j]*TL#*BR#
        //sum of all possible matrix = i=0, i <r1 , j=0, j/, c1->
        //total sum =  total sum + A[i][j] = no. of TL* no. of BR

        int r= A.length;
        int c= A[0].length;

        int totalSum =0 ;

        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                totalSum = totalSum+A[i][j]*TL(i,j)*BR(i,j,r,c);
            }
        }
            return totalSum;
    }
            public int TL(int i, int j){
                int ans = (i+1)*(j+1);
                return ans;
            }
            public int BR(int i, int j, int r, int c){
                int ans = (r-i)*(c-j);
                return ans;
            }
}





