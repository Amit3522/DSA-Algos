Problem Description
Given an array A of length N, with distinct integers.
Find length of the longest subarray which contains numbers that can be re - arranged in a continuous sequence.
A consecutive sequence of length X denotes a sequence with X elements such that all the adjacent pairs of elements have an absolute difference of 1.



Problem Constraints
1 <= N <= 103
1 <= A[i] <= 105
A[i], A[j] are pairwise distinct for all 1 <= i, j <= N, i != j


Input Format
The first argument is the integer array A.


Output Format
Return a single integer denoting the largest possible length of the required subarray.


Example Input
Input 1:
A = [10, 12, 11]
Input 2:

A = [1, 56, 58, 57, 90, 92, 94, 93, 91, 45]


Example Output
Output 1:
3
Output 2:

5


Example Explanation
Explanation 1:
The whole array can be re-arranged as [10, 11, 12] which is a consecutive sequence.
Hence, the answer is 3.
Explanation 2:

The subarray [90, 92, 94, 93, 91] can be rearranged into a consecutive sequence.
Hence, the answer is 5.









import java.util.*;
class Main {
	static int cnsqEl(int[] A){
		int l = A.length;
		int ans=0;
		
		for(int i=0;i<l-1;i++){
			int max =A[i]; int min =A[i];
			for(int j=i;j<l;j++){
				max=Math.max(max,A[j]);
				min=Math.min(min,A[j]);
				if(max-min==j-i){
					int len = j-i+1;
					if(len>ans){
						ans=len;
					}
				}
			}
		}
		if(l==1){
			return 1;
		}
		return ans;
	}

	public static void main(String args[]) {
		Scanner myScanner = new Scanner(System.in);
		int n = myScanner.nextInt();
		int[] a= new int[n];
		for(int i=0;i<n;i++){
			a[i]=myScanner.nextInt();
			//System.out.print(a[i]+" ");
		}

		int ce = cnsqEl(a);
		System.out.print(ce);

	}
}