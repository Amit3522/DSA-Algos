Problem Description

Given an integer array A of size N. You have to delete one element such that the GCD(Greatest common divisor) of the remaining array is maximum.

Find the maximum value of GCD.



Problem Constraints

2 <= N <= 105
1 <= A[i] <= 109



Input Format

First argument is an integer array A.



Output Format

Return an integer denoting the maximum value of GCD.



Example Input

Input 1:

 A = [12, 15, 18]
Input 2:

 A = [5, 15, 30]


Example Output

Output 1:

 6
Output 2:

 15


Example Explanation

Explanation 1:

 
 If you delete 12, gcd will be 3.
 If you delete 15, gcd will be 6.
 If you delete 18, gcd will 3.
 Maximum vallue of gcd is 6.
Explanation 2:

 If you delete 5, gcd will be 15.
 If you delete 15, gcd will be 5.
 If you delete 30, gcd will be 5.




public class Solution {
        //create a function to find gcd
    static int gcd(int a,int b){
                if(b==0){
                    return a;
                }
                return gcd(b,a%b);
    }
        //create a function to find prefix gcd array
        static int[] pfxgcd(int[] A){
            int l = A.length;
            int[] pfxGCD = new int[l];
            pfxGCD[0] = A[0];
            for(int i=1;i<l;i++){
                pfxGCD[i] = gcd(pfxGCD[i-1],A[i]);
            }
                return pfxGCD;
        }

        // create a suffix gcd array 
        static int[] sfxgcd(int[] A){
            int l = A.length;
            int[] sfxGCD = new int[l];
            sfxGCD[l-1] = A[l-1];   
            for(int i=l-2; i>=0;i--){
                sfxGCD[i] = gcd(sfxGCD[i+1],A[i]);
            }
                return sfxGCD;
        }


        
    public int solve(int[] A) {
            int l = A.length;
            int[] pfx = pfxgcd(A);
            int[] sfx = sfxgcd(A);
            int ans = 0;
            
            for(int i = 0;i<l;i++){
                if(i==0){
                    ans=Math.max(ans,sfx[i+1]);
                }
                else if(i==(l-1)){
                    ans=Math.max(ans,pfx[l-2]);
                }
                else{
                    ans=Math.max(ans,gcd(pfx[i-1],sfx[i+1]));
                }
            }

                return ans;
    }
}
