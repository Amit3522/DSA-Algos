Learning
#1 - Have faith the the recursive function will give right o/p
#2 - calculate o/p when A<0
#3 - use mode efficiently example

	(p*p*a)% c = ((p*p)%c*(a*c))%c

#4 - in case of long numbers , you should do the calucalations in long and once done, you can return the o/p in int
example
		

	long ans=  ((p%C)*(p%C))%C;
	return (int)ans;

==========================================
Implement pow(A, B) % C.
In other words, given A, B and C, Find (AB % C).

Note: The remainders on division cannot be negative. In other words, make sure the answer you return is non-negative.



Problem Constraints
-109 <= A <= 109
0 <= B <= 109
1 <= C <= 109


Input Format
Given three integers A, B, C.


Output Format
Return an integer.


Example Input
A = 2, B = 3, C = 3


Example Output
2


Example Explanation
23 % 3 = 8 % 3 = 2


import java.util.*;
class Main {
	static int pow(int A, int B, int C){
		if(A==0){
			return 0;
		}
		if(B==0){
			return 1;
		}

		long p = pow(A,B/2,C)%C;
		
        if(A>0){
		if(B%2==0){
			long ans=  ((p%C)*(p%C))%C;
			return (int)ans;
		}
		else{
			long ans= ((p*p)%C*(A)%C)%C;
			return (int)ans;
		}
        }
        else{
        if(B%2==0){
			long ans = ((p%C)*(p%C))%C;
			return (int)ans;
		}
        else{
           long ans= ((p*p)%C*(A%C))%C+C; 
		   return (int)(ans);
        }

        }
	}




	public static void main(String args[]) {
		Scanner myScanner = new Scanner(System.in);
		int a = myScanner.nextInt();
		int b = myScanner.nextInt();
		int c = myScanner.nextInt();

		int ans = pow(a,b,c);
		System.out.print(ans);
	}
}