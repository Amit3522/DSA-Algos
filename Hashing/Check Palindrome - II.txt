Problem Description
Given a string A consisting of lowercase characters.

Check if characters of the given string can be rearranged to form a palindrome.

Return 1 if it is possible to rearrange the characters of the string A such that it becomes a palindrome else return 0.



Problem Constraints
1 <= |A| <= 105

A consists only of lower-case characters.



Input Format
First argument is an string A.



Output Format
Return 1 if it is possible to rearrange the characters of the string A such that it becomes a palindrome else return 0.



Example Input
Input 1:

 A = "abcde"
Input 2:

 A = "abbaee"


Example Output
Output 1:

 0
Output 2:

 1


Example Explanation
Explanation 1:

 No possible rearrangement to make the string palindrome.
Explanation 2:

 Given string "abbaee" can be rearranged to "aebbea" to form a palindrome.




import java.util.*;
class Main {
	static int isPalindrome(String A){
		int l = A.length();
		
		HashMap<Character, Integer> hm = new HashMap<>();
		for(int i=0;i<l;i++){
			 if(hm.containsKey(A.charAt(i))){
				hm.put(A.charAt(i),hm.get(A.charAt(i))+1);
			 }
			 else{
				hm.put(A.charAt(i),1);
			}
		}


		int count =0 ;
		for(char key: hm.keySet()){
			int val = hm.get(key);
			if(val%2!=0){
				count=count+1;
			}
		}

		if(l%2==0 && count==0){
			return 1;
		}
		else if(l%2!=0 && count==1){
			return 1;
		}
		return 0;
	}


	public static void main(String args[]) {
		Scanner myScanner = new Scanner(System.in);
		String s = myScanner.next();

		int ans = isPalindrome(s);
		System.out.print(ans);
	}
}