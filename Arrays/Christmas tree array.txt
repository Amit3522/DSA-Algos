Problem Description
You are given an array A consisting of heights of Christmas trees and an array B of the same size consisting of the cost of each of the trees (Bi is the cost of tree Ai, where 1 ≤ i ≤ size(A)), and you are supposed to choose 3 trees (let's say, indices p, q, and r), such that Ap < Aq < Ar, where p < q < r.
The cost of these trees is Bp + Bq + Br.

You are to choose 3 trees such that their total cost is minimum. Return that cost.

If it is not possible to choose 3 such trees return -1.



Problem Constraints
1 <= A[i], B[i] <= 109
3 <= size(A) = size(B) <= 3000



Input Format
First argument is an integer array A.
Second argument is an integer array B.



Output Format
Return an integer denoting the minimum cost of choosing 3 trees whose heights are strictly in increasing order, if not possible, -1.



Example Input
Input 1:

 A = [1, 3, 5]
 B = [1, 2, 3]
Input 2:

 A = [1, 6, 4, 2, 6, 9]
 B = [2, 5, 7, 3, 2, 7]


Example Output
Output 1:

 6 
Output 2:

 7 


Example Explanation
Explanation 1:

 We can choose the trees with indices 1, 2 and 3, and the cost is 1 + 2 + 3 = 6. 



public class Solution {
    public int solve(int[] A, int[] B) {
        int l1= A.length;
        int l2=B.length;
        int ans =Integer.MAX_VALUE;
        //outer j loop on array A
        for(int j=1;j<l1-1;j++){ 
            int leftcost = Integer.MAX_VALUE;
            int rightcost =Integer.MAX_VALUE;
            //loop to check elements on left of j
            for(int i=j-1;i>=0;i--){
                if(A[i]<A[j]){
                    leftcost=Math.min(leftcost,B[i]);
                }
            }
            if(leftcost == Integer.MAX_VALUE ){
                continue; 
            }
            // loop to check elements on right of j
            for(int i=j+1;i<l1;i++){
                if(A[j]<A[i]){
                    rightcost=Math.min(rightcost,B[i]);
                }
            }
            if(rightcost== Integer.MAX_VALUE){
                continue;
            }
            ans=Math.min(ans,leftcost+B[j]+rightcost);

        }
        if(ans==Integer.MAX_VALUE){
            return -1;
        }
        return ans;

    }
}