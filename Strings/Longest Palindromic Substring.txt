Problem Description
Given a string A of size N, find and return the longest palindromic substring in A.

Substring of string A is A[i...j] where 0 <= i <= j < len(A)

Palindrome string:
A string which reads the same backwards. More formally, A is palindrome if reverse(A) = A.

Incase of conflict, return the substring which occurs first ( with the least starting index).



Problem Constraints
1 <= N <= 10000



Input Format
First and only argument is a string A.



Output Format
Return a string denoting the longest palindromic substring of string A.



Example Input
A = "aaaabaaa"


Example Output
"aaabaaa"


Example Explanation
We can see that longest palindromic substring is of length 7 and the string is "aaabaaa".







public class Solution {
    public String longestPalindrome(String A) {
		int l = A.length();
		if(l==2 && A.charAt(0)!=A.charAt(1)){
			return String.valueOf(A.charAt(0));
		}

		int st=0; int end=0; int lng=0; 
		
		
		for(int i=0;i<l;i++){
			int p1=i; int p2=i;
			while(p1>=0 && p2<l && A.charAt(p1)==A.charAt(p2)){
				p1--; p2++;
			}
			if((p2-p1-1)>lng){
				lng=p2-p1-1;
				st=p1+1;
				end=p2;
				}
			}
			
		
		

			for(int i=0;i<l-1;i++){
				int p1=i; int p2=i+1;
				while(p1>=0 && p2<l && A.charAt(p1)==A.charAt(p2)){
					p1--; p2++;
				}
				if((p2-p1-1)>lng){
					lng=p2-p1-1;
					st=p1+1;
					
					end=p2;
				}
			}
	
		return A.substring(st,end);
    }
}
